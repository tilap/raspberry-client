{"version":3,"sources":["../src/display.js"],"names":[],"mappings":";;;;;QAMgB;QAIA;QAOA;QAeA;QAMA;;;;;;;;AAlChB,MAAM,SAAS,+BAAkB,aAAlB,EAAiC,sBAAS,IAAT,CAA1C;;;;EAEC,SAAS,OAAT,GAAmB;AACtB,WAAO,wBAAU,cAAV,EAA0B,CAAC,SAAD,CAA1B,CAAP,CADsB;CAAnB;;;;EAIA,SAAS,MAAT,GAAkB;AACrB,WAAO,wBAAU,cAAV,EAA0B,CAAC,MAAD,EAAS,qBAAT,CAA1B,CAAP,CADqB;CAAlB;;AAIP,IAAI,WAAJ;AACA,IAAI,YAAJ;;;;EAEO,SAAS,KAAT,GAAiB;AACpB,WAAO,IAAP,CAAY,eAAZ,EADoB;AAEpB,kBAAc,IAAd,CAFoB;AAGpB,mBAAe,oBAAM,cAAN,EAAsB,CAAC,OAAD,EAAU,qBAAV,CAAtB,CAAf,CAHoB;AAIpB,iBAAa,MAAb,CAAoB,EAApB,CAAuB,MAAvB,EAA+B,QAAQ,OAAO,KAAP,CAAa,KAAK,QAAL,EAAb,CAAR,CAA/B,CAJoB;AAKpB,iBAAa,MAAb,CAAoB,EAApB,CAAuB,MAAvB,EAA+B,QAAQ,OAAO,KAAP,CAAa,KAAK,QAAL,EAAb,CAAR,CAA/B,CALoB;AAMpB,iBAAa,EAAb,CAAgB,OAAhB,EAAyB,QAAQ;AAC7B,eAAO,KAAP,CAAa,CAAC,+BAAD,GAAkC,IAAlC,EAAuC,CAApD,EAD6B;AAE7B,YAAI,WAAJ,EAAiB;AACb,oBADa;SAAjB;AAGA,qBAAa,GAAb,CAAiB,OAAjB,EAL6B;KAAR,CAAzB,CANoB;CAAjB;;;;EAeA,SAAS,OAAT,GAAmB;AACtB,YAAQ,OAAR,CAAgB,MAAhB,EACK,IADL,CACU,MAAM,OAAN,CADV,CADsB;CAAnB;;;;EAMA,SAAS,IAAT,GAAgB;AACnB,WAAO,IAAP,CAAY,cAAZ,EADmB;AAEnB,kBAAc,KAAd,CAFmB;AAGnB,QAAI,YAAJ,EAAkB;AACd,eAAO,IAAI,OAAJ,CAAY,WAAa;AAC5B,yBAAa,IAAb,CAAkB,OAAlB,EAA2B,MAAM,SAAN,CAA3B,CAD4B;AAE5B,yBAAa,IAAb,GAF4B;AAG5B,2BAAe,IAAf,CAH4B;SAAb,CAAnB,CADc;KAAlB;CAHG","file":"display.js","sourcesContent":["import { ConsoleLogger, LogLevel } from 'nightingale';\nimport { getUrl } from './config';\nimport { runScript, spawn } from './scripts';\n\nconst logger = new ConsoleLogger('app.display', LogLevel.INFO);\n\nexport function refresh() {\n    return runScript('./browser.sh', ['refresh']);\n}\n\nexport function update() {\n    return runScript('./browser.sh', ['load', getUrl()]);\n}\n\nlet autoRestart;\nlet childProcess;\n\nexport function start() {\n    logger.info('start display');\n    autoRestart = true;\n    childProcess = spawn('./browser.sh', ['start', getUrl()]);\n    childProcess.stdout.on('data', data => logger.debug(data.toString()));\n    childProcess.stderr.on('data', data => logger.error(data.toString()));\n    childProcess.on('close', code => {\n        logger.error(`child process exited with code ${code}`);\n        if (autoRestart) {\n            start();\n        }\n        childProcess.off('close');\n    });\n}\n\nexport function restart() {\n    Promise.resolve(stop())\n        .then(() => start());\n}\n\n\nexport function stop() {\n    logger.info('stop display');\n    autoRestart = false;\n    if (childProcess) {\n        return new Promise((resolve) => {\n            childProcess.once('close', () => resolve());\n            childProcess.kill();\n            childProcess = null;\n        });\n    }\n}\n"]}