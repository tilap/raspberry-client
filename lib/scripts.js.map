{"version":3,"sources":["../src/scripts.js"],"names":[],"mappings":";;;;;QAKgB;QAqBA;QA0BA;;;;;;AAjDhB,MAAM,SAAS,+BAAkB,aAAlB,EAAiC,sBAAS,IAAT,CAA1C;;;;;;EAEC,SAAS,SAAT,CAAmB,MAAnB,EAA2B,IAA3B,EAAiC;AACpC,WAAO,KAAP,CAAa,YAAb,EAA2B,EAAE,MAAF,EAAU,IAAV,EAA3B,EADoC;AAEpC,UAAM,SAAS,8BAAU,MAAV,EAAkB,IAAlB,EAAwB,EAAE,KAAK,CAAC,GAAE,SAAH,EAAa,YAAb,CAAL,EAA1B,CAAT,CAF8B;AAGpC,QAAI,OAAO,KAAP,EAAc;AACd,eAAO,KAAP,CAAa,OAAO,KAAP,CAAa,OAAb,CAAb,CADc;KAAlB;;AAIA,QAAI,OAAO,MAAP,EAAe;AACf,cAAM,SAAS,OAAO,MAAP,CAAc,QAAd,EAAT,CADS;AAEf,YAAI,MAAJ,EAAY;AACR,mBAAO,KAAP,CAAa,MAAb,EAAqB,EAAE,MAAF,EAAU,IAAV,EAArB,EADQ;SAAZ;KAFJ;;AAOA,QAAI,OAAO,MAAP,EAAe;AACf,cAAM,SAAS,OAAO,MAAP,CAAc,QAAd,GAAyB,IAAzB,EAAT,CADS;AAEf,eAAO,KAAP,CAAa,MAAb,EAAqB,EAAE,MAAF,EAAU,IAAV,EAArB,EAFe;AAGf,eAAO,MAAP,CAHe;KAAnB;CAdG;;;;;;;EAqBA,SAAS,YAAT,CAAsB,MAAtB,EAA8B,IAA9B,EAAoC,cAApC,EAAoD;AACvD,WAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAqB;AACpC,cAAM,eAAe,MAAM,MAAN,EAAc,IAAd,CAAf,CAD8B;AAEpC,qBAAa,MAAb,CAAoB,EAApB,CAAuB,MAAvB,EAA+B,QAAQ;AACnC,mBAAO,KAAK,QAAL,EAAP,CADmC;AAEnC,mBAAO,KAAP,CAAa,IAAb,EAFmC;AAGnC,2BAAe,IAAf,EAHmC;SAAR,CAA/B,CAFoC;;AAQpC,qBAAa,MAAb,CAAoB,EAApB,CAAuB,MAAvB,EAA+B,QAAQ;AACnC,mBAAO,KAAK,QAAL,EAAP,CADmC;AAEnC,mBAAO,KAAP,CAAa,IAAb,EAFmC;AAGnC,2BAAe,IAAf,EAHmC;SAAR,CAA/B,CARoC;;AAcpC,qBAAa,EAAb,CAAgB,OAAhB,EAAyB,QAAQ;AAC7B,gBAAI,IAAJ,EAAU;AACN,uBAAO,KAAP,CAAa,CAAC,+BAAD,GAAkC,IAAlC,EAAuC,CAApD,EADM;AAEN,uBAAO,OAAO,IAAP,CAAP,CAFM;aAAV;;AAKA,oBAAQ,IAAR,EAN6B;SAAR,CAAzB,CAdoC;KAArB,CAAnB,CADuD;CAApD;;;;;;EA0BA,SAAS,KAAT,CAAe,MAAf,EAAuB,IAAvB,EAA6B;AAChC,WAAO,KAAP,CAAa,OAAb,EAAsB,EAAE,MAAF,EAAU,IAAV,EAAtB,EADgC;AAEhC,WAAO,0BAAW,MAAX,EAAmB,IAAnB,EAAyB,EAAE,KAAK,CAAC,GAAE,SAAH,EAAa,YAAb,CAAL,EAA3B,CAAP,CAFgC;CAA7B","file":"scripts.js","sourcesContent":["import { spawn as spawnChild, spawnSync } from 'child_process';\nimport { ConsoleLogger, LogLevel } from 'nightingale';\n\nconst logger = new ConsoleLogger('app.scripts', LogLevel.INFO);\n\nexport function runScript(script, args) {\n    logger.debug('run script', { script, args });\n    const result = spawnSync(script, args, { cwd: `${__dirname}/../scripts/` });\n    if (result.error) {\n        logger.error(result.error.message);\n    }\n\n    if (result.stderr) {\n        const stderr = result.stderr.toString();\n        if (stderr) {\n            logger.error(stderr, { script, args });\n        }\n    }\n\n    if (result.stdout) {\n        const stdout = result.stdout.toString().trim();\n        logger.debug(stdout, { script, args });\n        return stdout;\n    }\n}\n\nexport function listenScript(script, args, callbackOnData) {\n    return new Promise((resolve, reject) => {\n        const childProcess = spawn(script, args);\n        childProcess.stdout.on('data', data => {\n            data = data.toString();\n            logger.debug(data);\n            callbackOnData(data);\n        });\n\n        childProcess.stderr.on('data', data => {\n            data = data.toString();\n            logger.debug(data);\n            callbackOnData(data);\n        });\n\n        childProcess.on('close', code => {\n            if (code) {\n                logger.error(`child process exited with code ${code}`);\n                return reject(code);\n            }\n\n            resolve(code);\n        });\n    });\n}\n\nexport function spawn(script, args) {\n    logger.debug('spawn', { script, args });\n    return spawnChild(script, args, { cwd: `${__dirname}/../scripts/` });\n}\n"]}