{"version":3,"sources":["../src/scripts.js"],"names":[],"mappings":";;;;;QAOgB,S,GAAA,S;QAqBA,Y,GAAA,Y;QA0BA,K,GAAA,K;;AAtDhB;;AACA;;;;;;AAEA,MAAM,SAAS,0BAAW,aAAX,CAAf;;AAEA,MAAM,gBAAgB,CAAC,AAAD,GAAG,SAAH,EAAa,YAAb,CAAtB;;AAEO,SAAS,SAAT,CAAmB,MAAnB,EAAmC,IAAnC,EAA6E;AAAA,qEAAJ,EAAI;;AAAA,QAAZ,GAAY,QAAZ,GAAY;;AAChF,WAAO,KAAP,CAAa,YAAb,EAA2B,EAAE,cAAF,EAAU,UAAV,EAA3B;AACA,UAAM,SAAS,8BAAU,MAAV,EAAkB,IAAlB,EAAwB,EAAE,KAAK,OAAO,aAAd,EAAxB,CAAf;AACA,QAAI,OAAO,KAAX,EAAkB;AACd,eAAO,KAAP,CAAa,OAAO,KAAP,CAAa,OAA1B;AACH;;AAED,QAAI,OAAO,MAAX,EAAmB;AACf,cAAM,SAAS,OAAO,MAAP,CAAc,QAAd,EAAf;AACA,YAAI,MAAJ,EAAY;AACR,mBAAO,KAAP,CAAa,MAAb,EAAqB,EAAE,cAAF,EAAU,UAAV,EAArB;AACH;AACJ;;AAED,QAAI,OAAO,MAAX,EAAmB;AACf,cAAM,SAAS,OAAO,MAAP,CAAc,QAAd,GAAyB,IAAzB,EAAf;AACA,eAAO,KAAP,CAAa,MAAb,EAAqB,EAAE,cAAF,EAAU,UAAV,EAArB;AACA,eAAO,MAAP;AACH;AACJ;;AAEM,SAAS,YAAT,CAAsB,MAAtB,EAAsC,IAAtC,EAAkE,cAAlE,EAA4F;AAC/F,WAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAqB;AACpC,cAAM,eAAe,MAAM,MAAN,EAAc,IAAd,CAArB;AACA,qBAAa,MAAb,CAAoB,EAApB,CAAuB,MAAvB,EAA+B,QAAQ;AACnC,mBAAO,KAAK,QAAL,EAAP;AACA,mBAAO,KAAP,CAAa,IAAb;AACA,2BAAe,IAAf;AACH,SAJD;;AAMA,qBAAa,MAAb,CAAoB,EAApB,CAAuB,MAAvB,EAA+B,QAAQ;AACnC,mBAAO,KAAK,QAAL,EAAP;AACA,mBAAO,KAAP,CAAa,IAAb;AACA,2BAAe,IAAf;AACH,SAJD;;AAMA,qBAAa,EAAb,CAAgB,OAAhB,EAAyB,QAAQ;AAC7B,gBAAI,IAAJ,EAAU;AACN,uBAAO,KAAP,CAAa,CAAC,+BAAD,GAAkC,IAAlC,EAAuC,AAAvC,CAAb;AACA,uBAAO,OAAO,IAAP,CAAP;AACH;;AAED,oBAAQ,IAAR;AACH,SAPD;AAQH,KAtBM,CAAP;AAuBH;;AAEM,SAAS,KAAT,CAAe,MAAf,EAA+B,IAA/B,EAA2D;AAC9D,WAAO,KAAP,CAAa,OAAb,EAAsB,EAAE,cAAF,EAAU,UAAV,EAAtB;AACA,WAAO,0BAAW,MAAX,EAAmB,IAAnB,EAAyB,EAAE,KAAK,aAAP,EAAzB,CAAP;AACH","file":"scripts.js","sourcesContent":["import { spawn as spawnChild, spawnSync } from 'child_process';\nimport Logger from 'nightingale';\n\nconst logger = new Logger('app.scripts');\n\nconst scriptDirname = `${__dirname}/../scripts/`;\n\nexport function runScript(script: string, args: Array<string|number>, { cwd } = {}) {\n    logger.debug('run script', { script, args });\n    const result = spawnSync(script, args, { cwd: cwd || scriptDirname });\n    if (result.error) {\n        logger.error(result.error.message);\n    }\n\n    if (result.stderr) {\n        const stderr = result.stderr.toString();\n        if (stderr) {\n            logger.error(stderr, { script, args });\n        }\n    }\n\n    if (result.stdout) {\n        const stdout = result.stdout.toString().trim();\n        logger.debug(stdout, { script, args });\n        return stdout;\n    }\n}\n\nexport function listenScript(script: string, args: Array<string|number>, callbackOnData: Function) {\n    return new Promise((resolve, reject) => {\n        const childProcess = spawn(script, args);\n        childProcess.stdout.on('data', data => {\n            data = data.toString();\n            logger.debug(data);\n            callbackOnData(data);\n        });\n\n        childProcess.stderr.on('data', data => {\n            data = data.toString();\n            logger.debug(data);\n            callbackOnData(data);\n        });\n\n        childProcess.on('close', code => {\n            if (code) {\n                logger.error(`child process exited with code ${code}`);\n                return reject(code);\n            }\n\n            resolve(code);\n        });\n    });\n}\n\nexport function spawn(script: string, args: Array<string|number>) {\n    logger.debug('spawn', { script, args });\n    return spawnChild(script, args, { cwd: scriptDirname });\n}\n"]}