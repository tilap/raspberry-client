{"version":3,"sources":["../src/client.js"],"names":[],"mappings":"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","file":"client.js","sourcesContent":["import Logger from 'nightingale';\nimport createSocketClient from 'socket.io-client';\nimport { host, port } from './argv';\nimport { getTime as getConfigTime, updateConfig } from './config';\nimport * as display from './display';\nimport findNetworkInterface from './networkInterface';\nimport * as screen from './screen';\nimport { selfUpdate } from './update';\nimport { version } from '../package.json';\n\nconst logger = new Logger('app.client');\n\nconst socket = createSocketClient(`${host}:${port}/raspberry-client`, {\n    reconnectionDelay: 500,\n    reconnectionDelayMax: 1000,\n    timeout: 4000,\n    transports: ['websocket'],\n});\n\nprocess.nextTick(() => {\n    logger.debug('Connecting', { host, port });\n    socket.connect();\n});\n\n\nfunction emit(eventName: string, ...args) {\n    logger.debug('emit', { eventName, args });\n    return socket.emit(eventName, ...args);\n}\n\nsocket.on('connect_error', err => logger.error('connect error', { host, port, errMessage: err.message }));\nsocket.on('reconnect_error', err => logger.debug('reconnect error', { host, port, err }));\n\nsocket.on('disconnect', () => logger.warn('disconnected'));\n\nsocket.on('reconnect', () => logger.success('reconnected'));\n\nsocket.on('connect', () => {\n    logger.success('connected');\n\n    const networkInterface = findNetworkInterface();\n    emit('hello', {\n        configTime: getConfigTime(),\n        version,\n        screenState: screen.currentScreenState,\n        ...networkInterface,\n    });\n});\n\nsocket.on('updateConfig', (config) => {\n    if (updateConfig(config)) {\n        display.update();\n    }\n});\n\nsocket.on('changeConfig', (config) => {\n    if (updateConfig(config)) {\n        display.update();\n    }\n});\n\nsocket.on('selfUpdate', () => selfUpdate());\n\nsocket.on('action', (action: string) => {\n    switch (action) {\n        case 'self-upgrade':\n        case 'self-update':\n        case 'selfUpdate':\n            return selfUpdate();\n\n        case 'screen-off':\n            return screen.off();\n        case 'screen-on':\n            return screen.on();\n\n        case 'refresh':\n            return display.refresh();\n    }\n\n    logger.warn(`unknown action: ${action}`);\n});\n\nexport function sendUpdate(data: Object): void {\n    socket.emit('update', data);\n}\n\nexport function close(): Promise|void {\n    if (!socket.connected) {\n        return;\n    }\n\n    return new Promise((resolve) => {\n        logger.info('Closing...');\n        socket.close();\n        socket.once('disconnect', () => {\n            resolve();\n        });\n    });\n}\n"]}