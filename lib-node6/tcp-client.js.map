{"version":3,"sources":["../src/tcp-client.js"],"names":[],"mappings":"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","file":"tcp-client.js","sourcesContent":["import { Socket } from 'net';\nimport Logger from 'nightingale';\nimport { createStream } from 'objectstream';\nimport { hostname, port } from './argv';\nimport { getTime as getConfigTime, updateConfig } from './config';\nimport * as display from './display';\nimport findNetworkInterface from './networkInterface';\nimport * as screen from './screen';\nimport { selfUpdate } from './update';\nimport { version } from '../package.json';\n\nconst logger = new Logger('app.tcp-client');\n\nlet autorestart = true;\nlet pingInterval;\nconst socket = new Socket({ host: hostname, port });\nconst jsonStream = createStream(socket);\n\njsonStream.on('error', err => {\n    logger.error(err);\n});\n\nsocket.on('error', err => {\n    logger.error(err);\n\n    if (pingInterval) {\n        clearInterval(pingInterval);\n    }\n\n    setTimeout(() => internalConnect(), 1000);\n});\n\nsocket.on('end', () => {\n    logger[autorestart ? 'warn' : 'info']('Closed');\n\n    if (pingInterval) {\n        clearInterval(pingInterval);\n    }\n\n    if (autorestart) {\n        setTimeout(() => internalConnect(), 1000);\n    }\n});\n\nsocket.setTimeout(120000, () => {\n    socket.destroy(new Error('timeout'));\n});\n\nfunction internalConnect() {\n    if (socket.writable) {\n        return;\n    }\n\n    logger.info(`connecting to ${hostname}:${port}`);\n    try {\n        socket.connect({ port, host: hostname });\n    } catch (err) {\n        logger.warn('could not connect', { message: err.message });\n    }\n}\n\nsocket.on('connect', () => {\n    const networkInterface = findNetworkInterface();\n    logger.info(`connected to ${hostname}:${port}`, { networkInterface });\n\n    pingInterval = setInterval(() => jsonStream.write({ type: 'ping' }), 30000);\n\n    jsonStream.write({\n        type: 'hello',\n        configTime: getConfigTime(),\n        version,\n        screenState: screen.currentScreenState,\n        ...networkInterface,\n    });\n});\n\njsonStream.on('data', data => {\n    if (data.type === 'ping') {\n        logger.debug('ping');\n        return;\n    }\n\n    logger.info('data', data);\n    switch (data.type) {\n        case 'update-config':\n        case 'change-config':\n            if (updateConfig(data.config)) {\n                display.update();\n            }\n            return;\n\n        case 'self-upgrade':\n        case 'self-update':\n        case 'selfUpdate':\n            return selfUpdate();\n\n        case 'action':\n            switch (data.action) {\n                case 'self-upgrade':\n                case 'self-update':\n                case 'selfUpdate':\n                    return selfUpdate();\n\n                case 'screen-off':\n                    return screen.off();\n                case 'screen-on':\n                    return screen.on();\n\n                case 'refresh':\n                    return display.refresh();\n            }\n            logger.warn(`unknown action: ${data.action}`);\n            return;\n\n        default:\n            logger.warn(`unknown type: ${data.type}`);\n    }\n});\n\ninternalConnect();\n\nexport function sendUpdate(data: Object) {\n    if (jsonStream.writable || socket.writable) {\n        jsonStream.write({\n            type: 'update',\n            ...data,\n        });\n    }\n}\n\n\nexport function close() {\n    autorestart = false;\n    if (socket.writable) {\n        return new Promise((resolve) => {\n            logger.info('Closing...');\n            socket.end(() => {\n                socket.once('end', () => {\n                    resolve();\n                });\n            });\n        });\n    }\n}\n"]}