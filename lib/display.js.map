{"version":3,"sources":["../src/display.js"],"names":[],"mappings":";;;;;QAMgB;QAIA;QAIA;QAOA;QA4BA;QAMA;;;;;;;;AAnDhB,MAAM,SAAS,+BAAkB,aAAlB,EAAiC,sBAAS,IAAT,CAA1C;;;;EAEC,SAAS,OAAT,GAAmB;AACtB,WAAO,wBAAU,cAAV,EAA0B,CAAC,SAAD,CAA1B,CAAP,CADsB;CAAnB;;;;EAIA,SAAS,MAAT,GAAkB;AACrB,WAAO,wBAAU,cAAV,EAA0B,CAAC,MAAD,EAAS,mBAAY,GAAZ,CAAnC,CAAP,CADqB;CAAlB;;;;EAIA,SAAS,UAAT,GAAsB;AACzB,WAAO,wBAAU,cAAV,EAA0B,CAAC,OAAD,CAA1B,CAAP,CADyB;CAAtB;;AAIP,IAAI,WAAJ;AACA,IAAI,YAAJ;;;;EAEO,SAAS,KAAT,GAAiB;AACpB,QAAI,iBAAiB,SAAjB,EAA4B;AAC5B,eAAO,IAAP,CAAY,yBAAZ,EAD4B;AAE5B,eAF4B;KAAhC;;AAKA,QAAI,YAAJ,EAAkB;AACd,eAAO,IAAP,CAAY,YAAZ,EADc;AAEd,eAAO,SAAP,CAFc;KAAlB;;AAKA,WAAO,IAAP,CAAY,eAAZ,EAXoB;AAYpB,kBAAc,IAAd,CAZoB;;AAcpB,UAAM,SAAS,kBAAT,CAdc;AAepB,UAAM,SAAS,OAAO,OAAP,KAAmB,cAAnB,GAAoC,cAApC,GAAqD,SAArD,CAfK;AAgBpB,mBAAe,oBAAM,CAAC,EAAD,GAAK,MAAL,EAAY,GAAZ,CAAN,EAAwB,CAAC,OAAD,EAAU,OAAO,GAAP,CAAlC,CAAf,CAhBoB;AAiBpB,iBAAa,MAAb,CAAoB,EAApB,CAAuB,MAAvB,EAA+B,QAAQ,OAAO,KAAP,CAAa,KAAK,QAAL,EAAb,CAAR,CAA/B,CAjBoB;AAkBpB,iBAAa,MAAb,CAAoB,EAApB,CAAuB,MAAvB,EAA+B,QAAQ,OAAO,KAAP,CAAa,KAAK,QAAL,EAAb,CAAR,CAA/B,CAlBoB;AAmBpB,iBAAa,EAAb,CAAgB,OAAhB,EAAyB,QAAQ;AAC7B,uBAAe,IAAf,CAD6B;AAE7B,eAAO,KAAP,CAAa,CAAC,+BAAD,GAAkC,IAAlC,EAAuC,CAApD,EAF6B;AAG7B,YAAI,WAAJ,EAAiB;AACb,oBAAQ,QAAR,CAAiB,MAAM,OAAN,CAAjB,CADa;SAAjB;KAHqB,CAAzB,CAnBoB;CAAjB;;;;EA4BA,SAAS,OAAT,GAAmB;AACtB,YAAQ,OAAR,CAAgB,MAAhB,EACK,IADL,CACU,MAAM,OAAN,CADV,CADsB;CAAnB;;;;EAMA,SAAS,IAAT,GAAgB;AACnB,WAAO,IAAP,CAAY,iBAAZ,EADmB;AAEnB,kBAAc,KAAd,CAFmB;AAGnB,QAAI,YAAJ,EAAkB;AACd,eAAO,IAAI,OAAJ,CAAY,WAAa;AAC5B,yBAAa,IAAb,CAAkB,OAAlB,EAA2B,MAAM;AAC7B,uBAAO,IAAP,CAAY,iBAAZ,EAD6B;AAE7B,0BAF6B;aAAN,CAA3B,CAD4B;AAK5B,yBAAa,IAAb,GAL4B;AAM5B,2BAAe,IAAf,CAN4B;SAAb,CAAnB,CADc;KAAlB;CAHG","file":"display.js","sourcesContent":["import { ConsoleLogger, LogLevel } from 'nightingale';\nimport { get as getConfig } from './config';\nimport { runScript, spawn } from './scripts';\n\nconst logger = new ConsoleLogger('app.display', LogLevel.INFO);\n\nexport function refresh() {\n    return runScript('./browser.sh', ['refresh']);\n}\n\nexport function update() {\n    return runScript('./browser.sh', ['load', getConfig().url]);\n}\n\nexport function runOpenBox() {\n    return runScript('./openbox.sh', ['start']);\n}\n\nlet autoRestart;\nlet childProcess;\n\nexport function start() {\n    if (runOpenBox() !== 'started') {\n        logger.warn('openbox not yet started');\n        return;\n    }\n\n    if (childProcess) {\n        logger.warn('restarting');\n        return restart();\n    }\n\n    logger.info('start display');\n    autoRestart = true;\n\n    const config = getConfig();\n    const script = config.display === 'livestreamer' ? 'livestreamer' : 'browser';\n    childProcess = spawn(`./${script}.sh`, ['start', config.url]);\n    childProcess.stdout.on('data', data => logger.debug(data.toString()));\n    childProcess.stderr.on('data', data => logger.error(data.toString()));\n    childProcess.on('close', code => {\n        childProcess = null;\n        logger.error(`child process exited with code ${code}`);\n        if (autoRestart) {\n            process.nextTick(() => start());\n        }\n    });\n}\n\nexport function restart() {\n    Promise.resolve(stop())\n        .then(() => start());\n}\n\n\nexport function stop() {\n    logger.info('stoping display');\n    autoRestart = false;\n    if (childProcess) {\n        return new Promise((resolve) => {\n            childProcess.once('close', () => {\n                logger.info('display stopped');\n                resolve();\n            });\n            childProcess.kill();\n            childProcess = null;\n        });\n    }\n}\n"]}