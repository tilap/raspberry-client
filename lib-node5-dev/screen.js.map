{"version":3,"sources":["../src/screen.js"],"names":[],"mappings":";;;;;;;;gCAyCO,aAA4B;AAC/B,YAAI,uBAAuB,IAA3B,EAAiC;AAC7B,mBAAO,IAAP,CAAY,2BAAZ;AACA;AACH;;AAED,YAAI,cAAJ,EAAoB;AAChB,mBAAO,IAAP,CAAY,oBAAZ;AACA;AACH;;AAED,eAAO,IAAP,CAAY,oBAAZ;;AAEA,cAAM,WAAW,CAAC,AAAD,GAAG,iBAAH,EAAY,eAAZ,CAAjB;AACA,yBAAiB,IAAjB;AACA,gCAAU,aAAV,EAAyB,CAAC,YAAD,EAAe,QAAf,CAAzB;;AAEA,eAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACpC,8BAAS,QAAT,EAAmB,UAAC,GAAD,EAAM,MAAN,EAAiB;AAChC,iCAAiB,KAAjB;AACA,wBAAQ;AACJ,kCADI;AAEJ,8BAAU,oBAAM;AACZ,4BAAI;AACA,gDAAW,QAAX;AACH,yBAFD,CAEE,OAAO,GAAP,EAAY,CACb;AACJ;AAPG,iBAAR;AASH,aAXD;AAYH,SAbM,CAAP;AAcH,K;;oBA/BqB,U;;;;;QAtBN,E,GAAA,E;QAQA,G,GAAA,G;;AA3BhB;;AACA;;AACA;;;;AACA;;AACA;;AACA;;IAAY,O;;;;;;;;AAEZ,MAAM,SAAS,0BAAW,YAAX,CAAf;;AAEO,IAAI,kDAAqB,OAAzB;AACP,OAAO,IAAP,CAAY,MAAZ,EAAoB,EAAE,sCAAF,EAApB;;;;;AAKA,SAAS,KAAT,GAAiB;AACb,WAAO,wBAAU,aAAV,EAAyB,CAAC,OAAD,CAAzB,CAAP;AACH;;AAEM,SAAS,EAAT,GAAc;AACjB,WAAO,IAAP,CAAY,mBAAZ;AACA,4BAAU,aAAV,EAAyB,CAAC,IAAD,CAAzB;AACA,YAbO,kBAaP,wBAAqB,IAArB;AACA,4BAAW,EAAE,aAAa,kBAAf,EAAX;AACA,YAAQ,KAAR;AACH;;AAEM,SAAS,GAAT,GAAe;AAClB,WAAO,IAAP,CAAY,oBAAZ;AACA,4BAAU,aAAV,EAAyB,CAAC,KAAD,CAAzB;AACA,YArBO,kBAqBP,wBAAqB,KAArB;AACA,4BAAW,EAAE,aAAa,kBAAf,EAAX;AACA,YAAQ,IAAR;AACH;;AAED,IAAI,uBAAuB,IAA3B,EAAiC;AAC7B,YAAQ,KAAR;AACH;;AAED,IAAI,cAAJ","file":"screen.js","sourcesContent":["import { readFile, unlinkSync } from 'fs';\nimport { tmpdir } from 'os';\nimport Logger from 'nightingale';\nimport { runScript } from './scripts';\nimport { sendUpdate } from './client';\nimport * as display from './display';\n\nconst logger = new Logger('app.screen');\n\nexport let currentScreenState = state();\nlogger.info('init', { currentScreenState });\n\n/**\n * @returns {string} on|off|unavailable\n */\nfunction state() {\n    return runScript('./screen.sh', ['state']);\n}\n\nexport function on() {\n    logger.info('turning screen on');\n    runScript('./screen.sh', ['on']);\n    currentScreenState = 'on';\n    sendUpdate({ screenState: currentScreenState });\n    display.start();\n}\n\nexport function off() {\n    logger.info('turning screen off');\n    runScript('./screen.sh', ['off']);\n    currentScreenState = 'off';\n    sendUpdate({ screenState: currentScreenState });\n    display.stop();\n}\n\nif (currentScreenState === 'on') {\n    display.start();\n}\n\nlet lockScreenshot;\n\nexport async function screenshot() {\n    if (currentScreenState !== 'on') {\n        logger.warn('screenshot: screen is off');\n        return;\n    }\n\n    if (lockScreenshot) {\n        logger.warn('screenshot: locked');\n        return;\n    }\n\n    logger.info('getting screenshot');\n\n    const filename = `${tmpdir()}/screenshot.png`;\n    lockScreenshot = true;\n    runScript('./screen.sh', ['screenshot', filename]);\n\n    return new Promise((resolve, reject) => {\n        readFile(filename, (err, buffer) => {\n            lockScreenshot = false;\n            resolve({\n                buffer,\n                callback: () => {\n                    try {\n                        unlinkSync(filename);\n                    } catch (err) {\n                    }\n                },\n            });\n        });\n    });\n}\n"]}