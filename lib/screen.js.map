{"version":3,"sources":["../src/screen.js"],"names":[],"mappings":";;;;;;QAegB;QAKA;QAQA;;;;;;;;;;IAzBJ;;;;;;;;AAEZ,MAAM,SAAS,+BAAkB,YAAlB,EAAgC,sBAAS,IAAT,CAAzC;;;;;;EAEN,SAAS,eAAT,CAAyB,aAAzB,EAAwC,EAAxC,EAA4C;AACxC,UAAM,WAAW,YAAX,CADkC;AAExC,QAAI,aAAa,aAAb,EAA4B;AAC5B,mBAAW,MAAM,gBAAgB,aAAhB,EAA+B,EAA/B,CAAN,EAA0C,EAArD,EAD4B;KAAhC;CAFJ;;;;EAQO,SAAS,EAAT,GAAc;AACjB,4BAAU,aAAV,EAAyB,CAAC,IAAD,CAAzB,EADiB;AAEjB,oBAAgB,IAAhB,EAAsB,GAAtB,EAFiB;CAAd;;;;EAKA,SAAS,GAAT,GAAe;AAClB,4BAAU,aAAV,EAAyB,CAAC,KAAD,CAAzB,EADkB;AAElB,oBAAgB,KAAhB,EAAuB,GAAvB,EAFkB;CAAf;;;;;;;EAQA,SAAS,KAAT,GAAiB;AACpB,WAAO,wBAAU,aAAV,EAAyB,CAAC,OAAD,CAAzB,CAAP,CADoB;CAAjB;;AAIA,IAAI,kDAAqB,OAArB;;;;;;AAKX,SAAS,SAAT,GAAqB;AACjB,WAAO,2BAAa,aAAb,EAA4B,CAAC,WAAD,CAA5B,EAA2C,MAAM;AACpD,YAAI,uBAAuB,KAAvB,EAA8B;AAC9B,yBAD8B;SAAlC;KAD8C,CAAlD,CADiB;CAArB;;AAQA,YAAY,UAAZ,EAAwB,KAAxB;;;;EAEA,SAAS,UAAT,GAAsB;AAClB,UAAM,iBAAiB,OAAjB,CADY;AAElB,QAAI,kBAAkB,kBAAlB,EAAsC;AACtC,eAAO,IAAP,CAAY,sBAAZ,EAAoC,EAAE,KAAK,kBAAL,EAAyB,KAAK,cAAL,EAA/D,EADsC;AAEtC,gBAnBG,qBAmBH,qBAAqB,cAArB,CAFsC;AAGtC,mCAAW,EAAE,aAAa,cAAb,EAAb,EAHsC;AAItC,YAAI,uBAAuB,IAAvB,EAA6B;AAC7B,oBAAQ,IAAR,GAD6B;SAAjC;KAJJ;AAQA,WAAO,cAAP,CAVkB;CAAtB;;AAcA;;AAEA,IAAI,uBAAuB,IAAvB,EAA6B;AAC7B,YAAQ,KAAR,GAD6B;CAAjC","file":"screen.js","sourcesContent":["import { ConsoleLogger, LogLevel } from 'nightingale';\nimport { runScript, listenScript } from './scripts';\nimport { sendUpdate } from './tcp-client';\nimport * as display from './display';\n\nconst logger = new ConsoleLogger('app.screen', LogLevel.INFO);\n\nfunction checkStateWhile(expectedState, ms) {\n    const newState = checkState();\n    if (newState !== expectedState) {\n        setTimeout(() => checkStateWhile(expectedState, ms), ms);\n    }\n}\n\n\nexport function on() {\n    runScript('./screen.sh', ['on']);\n    checkStateWhile('on', 500);\n}\n\nexport function off() {\n    runScript('./screen.sh', ['off']);\n    checkStateWhile('off', 500);\n}\n\n/**\n * @returns {string} on|off|unavailable\n */\nexport function state() {\n    return runScript('./screen.sh', ['state']);\n}\n\nexport let currentScreenState = state();\n\n/**\n * @returns {string} on|off\n */\nfunction subscribe() {\n    return listenScript('./screen.sh', ['subscribe'], () => {\n        if (currentScreenState !== 'off') {\n            checkState();\n        }\n    });\n}\n\nsetInterval(checkState, 60000);\n\nfunction checkState() {\n    const newScreenState = state();\n    if (newScreenState != currentScreenState) {\n        logger.info('screen state changed', { old: currentScreenState, new: newScreenState })\n        currentScreenState = newScreenState;\n        sendUpdate({ screenState: newScreenState });\n        if (currentScreenState !== 'on') {\n            display.stop();\n        }\n    }\n    return newScreenState;\n}\n\n\nsubscribe();\n\nif (currentScreenState === 'on') {\n    display.start();\n}\n"]}