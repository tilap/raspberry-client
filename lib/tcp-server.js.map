{"version":3,"sources":["../src/tcp-server.js"],"names":[],"mappings":";;;;;QAyEgB;;;;;;;;;;;;IArEJ;;;;IACA;;;;;;;;;;AAGZ,MAAM,SAAS,+BAAkB,gBAAlB,EAAoC,sBAAS,IAAT,CAA7C;;;;;EAEN,SAAS,GAAT,CAAa,IAAb,EAAmB;AACf,QAAI,CAAC,IAAD,IAAS,CAAC,KAAK,CAAL,IAAU,CAAC,KAAK,CAAL,CAAO,CAAP,CAAD,EAAY;AAChC,cAAM,IAAI,KAAJ,CAAU,gBAAV,CAAN,CADgC;KAApC;AAGA,UAAM,SAAS,KAAK,CAAL,CAAO,CAAP,CAAT,CAJS;AAKf,YAAQ,MAAR;AACI,aAAK,aAAL,CADJ;AAEI,aAAK,YAAL;AACI,mBAAO,yBAAP,CADJ;AAFJ,aAIS,QAAL;AACI,oBAAQ,KAAK,CAAL,CAAO,CAAP,CAAR;AACI,qBAAK,IAAL,CADJ;AAEI,qBAAK,KAAL,CAFJ;AAGI,qBAAK,OAAL;AACI,2BAAO,OAAO,KAAK,CAAL,CAAO,CAAP,CAAP,GAAP,CADJ;AAHJ,aADJ;AAOI,kBAAM,IAAI,KAAJ,CAAU,CAAC,gCAAD,GAAmC,KAAK,CAAL,CAAO,CAAP,CAAnC,EAA6C,CAAvD,CAAN,CAPJ;AAJJ,aAYS,SAAL;AACI,oBAAQ,KAAK,CAAL,CAAO,CAAP,CAAR;AACI,qBAAK,OAAL,CADJ;AAEI,qBAAK,iBAAL;AACI,2BAAO,QAAQ,KAAR,EAAP,CADJ;AAFJ,qBAIS,SAAL;AACI,2BAAO,QAAQ,OAAR,EAAP,CADJ;AAJJ,qBAMS,SAAL;AACI,2BAAO,QAAQ,OAAR,EAAP,CADJ;AANJ,aADJ;AAUI,kBAAM,IAAI,KAAJ,CAAU,CAAC,iCAAD,GAAoC,KAAK,CAAL,CAAO,CAAP,CAApC,EAA8C,CAAxD,CAAN,CAVJ;AAZJ,KALe;AA6Bf,UAAM,IAAI,KAAJ,CAAU,CAAC,yBAAD,GAA4B,MAA5B,EAAmC,CAA7C,CAAN,CA7Be;CAAnB;;AAgCA,MAAM,SAAS,uBAAa,UAAU;AAClC,WAAO,IAAP,CAAY,kBAAZ,EADkC;AAElC,UAAM,aAAa,gCAAa,MAAb,CAAb,CAF4B;;AAIlC,WAAO,EAAP,CAAU,KAAV,EAAiB,MAAM;AACnB,eAAO,IAAP,CAAY,qBAAZ,EADmB;;AAGnB,YAAI,UAAJ,EAAgB;AACZ,uBAAW,GAAX,GADY;SAAhB;KAHa,CAAjB,CAJkC;;AAYlC,eAAW,EAAX,CAAc,MAAd,EAAsB,QAAQ;AAC1B,eAAO,IAAP,CAAY,MAAZ,EAAoB,EAAE,IAAF,EAApB,EAD0B;AAE1B,YAAI;AACA,kBAAM,SAAS,IAAI,IAAJ,CAAT,CADN;AAEA,uBAAW,KAAX,CAAiB,EAAE,MAAM,MAAN,EAAc,MAAhB,EAAjB,EAFA;SAAJ,CAGE,OAAO,GAAP,EAAY;AACV,uBAAW,KAAX,CAAiB,EAAE,OAAO,IAAI,OAAJ,EAA1B,EADU;SAAZ;KALgB,CAAtB,CAZkC;CAAV,CAAtB;;AAuBN,IAAI;AACA,wBAAW,CAAC,GAAE,SAAH,EAAa,UAAb,CAAX,EADA;CAAJ,CAEE,OAAO,CAAP,EAAU,EAAV;;AAEF,OAAO,MAAP,CAAc,CAAC,GAAE,SAAH,EAAa,UAAb,CAAd,EAAwC,MAAM;AAC1C,WAAO,IAAP,CAAY,WAAZ,EAD0C;CAAN,CAAxC;;;;EAIO,SAAS,KAAT,GAAiB;AACpB,WAAO,IAAI,OAAJ,CAAY,WAAa;AAC5B,eAAO,IAAP,CAAY,YAAZ,EAD4B;AAE5B,eAAO,KAAP,CAAa,MAAM;AACf,mBAAO,IAAP,CAAY,QAAZ,EADe;AAEf,sBAFe;SAAN,CAAb,CAF4B;KAAb,CAAnB,CADoB;CAAjB","file":"tcp-server.js","sourcesContent":["import { createServer } from 'net';\nimport { unlinkSync } from 'fs';\nimport { ConsoleLogger, LogLevel } from 'nightingale';\nimport { createStream } from 'objectstream';\nimport * as screen from './screen';\nimport * as display from './display';\nimport { selfUpdate } from './update';\n\nconst logger = new ConsoleLogger('app.tcp-server', LogLevel.INFO);\n\nfunction run(data) {\n    if (!data || !data._ || !data._[0]) {\n        throw new Error('Missing action');\n    }\n    const action = data._[0];\n    switch (action) {\n        case 'self-update':\n        case 'selfUpdate':\n            return selfUpdate();\n        case 'screen':\n            switch (data._[1]) {\n                case 'on':\n                case 'off':\n                case 'state':\n                    return screen[data._[1]]();\n            }\n            throw new Error(`Unsupported screen instruction: ${data._[1]}`);\n        case 'display':\n            switch (data._[1]) {\n                case 'start':\n                case 'openbox-started':\n                    return display.start();\n                case 'restart':\n                    return display.restart();\n                case 'refresh':\n                    return display.refresh();\n            }\n            throw new Error(`Unsupported display instruction: ${data._[1]}`);\n    }\n    throw new Error(`Unsupported instruction: ${action}`);\n}\n\nconst server = createServer(socket => {\n    logger.info('client connected');\n    const jsonStream = createStream(socket);\n\n    socket.on('end', () => {\n        logger.info('client disconnected');\n\n        if (jsonStream) {\n            jsonStream.end();\n        }\n    });\n\n    jsonStream.on('data', data => {\n        logger.info('data', { data });\n        try {\n            const result = run(data);\n            jsonStream.write({ type: 'done', result });\n        } catch (err) {\n            jsonStream.write({ error: err.message });\n        }\n    });\n});\n\ntry {\n    unlinkSync(`${__dirname}/../socket`);\n} catch (e) {}\n\nserver.listen(`${__dirname}/../socket`, () => {\n    logger.info('Listening');\n});\n\nexport function close() {\n    return new Promise((resolve) => {\n        logger.info('Closing...');\n        server.close(() => {\n            logger.info('Closed');\n            resolve();\n        });\n    });\n}\n"]}