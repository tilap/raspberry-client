{"version":3,"sources":["../src/cli-server.js"],"names":[],"mappings":";;;;;QA0EgB,K,GAAA,K;;AA1EhB;;AACA;;AACA;;;;AACA;;AACA;;IAAY,M;;AACZ;;IAAY,O;;AACZ;;;;;;AAEA,MAAM,SAAS,0BAAW,gBAAX,CAAf;;AAEA,SAAS,GAAT,CAAa,IAAb,EAA2B;AACvB,QAAI,CAAC,IAAD,IAAS,CAAC,KAAK,CAAf,IAAoB,CAAC,KAAK,CAAL,CAAO,CAAP,CAAzB,EAAoC;AAChC,cAAM,IAAI,KAAJ,CAAU,gBAAV,CAAN;AACH;AACD,UAAM,SAAS,KAAK,CAAL,CAAO,CAAP,CAAf;AACA,YAAQ,MAAR;AACI,aAAK,aAAL;AACA,aAAK,YAAL;AACI,mBAAO,yBAAP;AACJ,aAAK,QAAL;AACI,oBAAQ,KAAK,CAAL,CAAO,CAAP,CAAR;AACI,qBAAK,IAAL;AACA,qBAAK,KAAL;AACA,qBAAK,OAAL;AACI,2BAAO,OAAO,KAAK,CAAL,CAAO,CAAP,CAAP,GAAP;AAJR;AAMA,kBAAM,IAAI,KAAJ,CAAU,CAAC,gCAAD,GAAmC,KAAK,CAAL,CAAO,CAAP,CAAnC,EAA6C,AAA7C,CAAV,CAAN;AACJ,aAAK,SAAL;AACI,oBAAQ,KAAK,CAAL,CAAO,CAAP,CAAR;AACI,qBAAK,OAAL;AACI,2BAAO,QAAQ,KAAR,EAAP;AACJ,qBAAK,iBAAL;AACI,2BAAO,QAAQ,cAAR,EAAP;AACJ,qBAAK,SAAL;AACI,2BAAO,QAAQ,OAAR,EAAP;AACJ,qBAAK,SAAL;AACI,2BAAO,QAAQ,OAAR,EAAP;AARR;AAUA,kBAAM,IAAI,KAAJ,CAAU,CAAC,iCAAD,GAAoC,KAAK,CAAL,CAAO,CAAP,CAApC,EAA8C,AAA9C,CAAV,CAAN;AAvBR;AAyBA,UAAM,IAAI,KAAJ,CAAU,CAAC,yBAAD,GAA4B,MAA5B,EAAmC,AAAnC,CAAV,CAAN;AACH;;AAED,MAAM,SAAS,uBAAa,UAAU;AAClC,WAAO,IAAP,CAAY,kBAAZ;AACA,UAAM,aAAa,gCAAa,MAAb,CAAnB;;AAEA,WAAO,EAAP,CAAU,KAAV,EAAiB,MAAM;AACnB,eAAO,IAAP,CAAY,qBAAZ;;AAEA,YAAI,UAAJ,EAAgB;AACZ,uBAAW,GAAX;AACH;AACJ,KAND;;AAQA,eAAW,EAAX,CAAc,MAAd,EAAsB,QAAQ;AAC1B,eAAO,IAAP,CAAY,MAAZ,EAAoB,EAAE,UAAF,EAApB;AACA,YAAI;AACA,kBAAM,SAAS,IAAI,IAAJ,CAAf;AACA,uBAAW,KAAX,CAAiB,EAAE,MAAM,MAAR,EAAgB,cAAhB,EAAjB;AACH,SAHD,CAGE,OAAO,GAAP,EAAY;AACV,uBAAW,KAAX,CAAiB,EAAE,OAAO,IAAI,OAAb,EAAjB;AACH;AACJ,KARD;AASH,CArBc,CAAf;;AAuBA,IAAI;AACA,wBAAW,CAAC,AAAD,GAAG,SAAH,EAAa,UAAb,CAAX;AACH,CAFD,CAEE,OAAO,CAAP,EAAU,CAAE;;AAEd,OAAO,MAAP,CAAc,CAAC,AAAD,GAAG,SAAH,EAAa,UAAb,CAAd,EAAwC,MAAM;AAC1C,WAAO,IAAP,CAAY,WAAZ;AACH,CAFD;;AAIO,SAAS,KAAT,GAAiB;AACpB,WAAO,IAAI,OAAJ,CAAa,OAAD,IAAa;AAC5B,eAAO,IAAP,CAAY,YAAZ;AACA,eAAO,KAAP,CAAa,MAAM;AACf,mBAAO,IAAP,CAAY,QAAZ;AACA;AACH,SAHD;AAIH,KANM,CAAP;AAOH","file":"cli-server.js","sourcesContent":["import { createServer } from 'net';\nimport { unlinkSync } from 'fs';\nimport Logger from 'nightingale';\nimport { createStream } from 'objectstream';\nimport * as screen from './screen';\nimport * as display from './display';\nimport { selfUpdate } from './update';\n\nconst logger = new Logger('app.cli-server');\n\nfunction run(data: Object) {\n    if (!data || !data._ || !data._[0]) {\n        throw new Error('Missing action');\n    }\n    const action = data._[0];\n    switch (action) {\n        case 'self-update':\n        case 'selfUpdate':\n            return selfUpdate();\n        case 'screen':\n            switch (data._[1]) {\n                case 'on':\n                case 'off':\n                case 'state':\n                    return screen[data._[1]]();\n            }\n            throw new Error(`Unsupported screen instruction: ${data._[1]}`);\n        case 'display':\n            switch (data._[1]) {\n                case 'start':\n                    return display.start();\n                case 'openbox-started':\n                    return display.openboxStarted();\n                case 'restart':\n                    return display.restart();\n                case 'refresh':\n                    return display.refresh();\n            }\n            throw new Error(`Unsupported display instruction: ${data._[1]}`);\n    }\n    throw new Error(`Unsupported instruction: ${action}`);\n}\n\nconst server = createServer(socket => {\n    logger.info('client connected');\n    const jsonStream = createStream(socket);\n\n    socket.on('end', () => {\n        logger.info('client disconnected');\n\n        if (jsonStream) {\n            jsonStream.end();\n        }\n    });\n\n    jsonStream.on('data', data => {\n        logger.info('data', { data });\n        try {\n            const result = run(data);\n            jsonStream.write({ type: 'done', result });\n        } catch (err) {\n            jsonStream.write({ error: err.message });\n        }\n    });\n});\n\ntry {\n    unlinkSync(`${__dirname}/../socket`);\n} catch (e) {}\n\nserver.listen(`${__dirname}/../socket`, () => {\n    logger.info('Listening');\n});\n\nexport function close() {\n    return new Promise((resolve) => {\n        logger.info('Closing...');\n        server.close(() => {\n            logger.info('Closed');\n            resolve();\n        });\n    });\n}\n"]}