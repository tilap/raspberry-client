{"version":3,"sources":["../src/tcp-client.js"],"names":[],"mappings":"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","file":"tcp-client.js","sourcesContent":["import { Socket } from 'net';\nimport { ConsoleLogger, LogLevel } from 'nightingale';\nimport { createStream } from 'objectstream';\nimport { host, port } from './argv';\nimport { getTime as getConfigTime, updateConfig } from './config';\nimport * as display from './display';\nimport findNetworkInterface from './networkInterface';\nimport { currentScreenState } from './screen';\nimport * as screen from './screen';\nimport { selfUpdate } from './update';\nimport { version } from '../package.json';\n\nconst logger = new ConsoleLogger('app.tcp-client', LogLevel.INFO);\n\n\nlet pingInterval;\nconst socket = new Socket({ host, port });\nconst jsonStream = createStream(socket);\n\njsonStream.on('error', err => {\n    logger.error(err);\n});\n\nsocket.on('error', err => {\n    logger.error(err);\n\n    if (pingInterval) {\n        clearInterval(pingInterval);\n    }\n\n    setTimeout(() => _connect(), 1000);\n});\n\nsocket.on('end', () => {\n    logger.warn(`socket ended`);\n\n    if (pingInterval) {\n        clearInterval(pingInterval);\n    }\n\n    setTimeout(() => _connect(), 1000);\n});\n\nfunction _connect() {\n    if (socket.writable) {\n        return;\n    }\n\n    logger.info(`connecting to ${host}:${port}`);\n    try {\n        socket.connect({ port, host });\n    } catch (err) {\n        logger.warn('could not connect', { message: err.message });\n    }\n}\n\nsocket.on('connect', () => {\n    const networkInterface = findNetworkInterface();\n    logger.info(`connected to ${host}:${port}`, { networkInterface });\n\n    pingInterval = setInterval(() => jsonStream.write({ type: 'ping' }), 10000);\n\n    jsonStream.write({\n        type: 'hello',\n        configTime: getConfigTime(),\n        version,\n        screenState: currentScreenState,\n        ...networkInterface,\n    });\n});\n\njsonStream.on('data', data => {\n    if (data.type === 'ping') {\n        logger.debug('ping');\n        return;\n    }\n\n    logger.info('data', data);\n    switch (data.type) {\n        case 'update-config':\n        case 'change-config':\n            if (updateConfig(data.config)) {\n                display.update();\n            }\n            return;\n\n        case 'selfUpdate':\n            return selfUpdate();\n\n        case 'action':\n            switch (data.action) {\n                case 'screen-off':\n                    return screen.off();\n                case 'screen-on':\n                    return screen.on();\n                case 'refresh':\n                    return display.refresh();\n            }\n\n        default:\n            logger.warn(`unknown type: ${data.type}`);\n    }\n});\n\n_connect();\n\n\nexport function sendUpdate(data) {\n    if (jsonStream.writable || socket.writable) {\n        jsonStream.write({\n            type: 'update',\n            ...data\n        });\n    }\n}\n"]}