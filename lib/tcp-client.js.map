{"version":3,"sources":["../src/tcp-client.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;IAKY;;;;;;;;;;;;;;;;AAGZ,MAAM,SAAS,+BAAkB,QAAlB,CAAT;;AAGN,IAAI,YAAJ;AACA,MAAM,SAAS,gBAAW,EAAE,gBAAF,EAAQ,gBAAR,EAAX,CAAT;AACN,MAAM,aAAa,gCAAa,MAAb,CAAb;;AAEN,WAAW,EAAX,CAAc,OAAd,EAAuB,OAAO;AAC1B,WAAO,KAAP,CAAa,GAAb,EAD0B;CAAP,CAAvB;;AAIA,OAAO,EAAP,CAAU,OAAV,EAAmB,OAAO;AACtB,WAAO,KAAP,CAAa,GAAb,EADsB;;AAGtB,QAAI,YAAJ,EAAkB;AACd,sBAAc,YAAd,EADc;KAAlB;;AAIA,eAAW,MAAM,UAAN,EAAkB,IAA7B,EAPsB;CAAP,CAAnB;;AAUA,OAAO,EAAP,CAAU,KAAV,EAAiB,MAAM;AACnB,WAAO,IAAP,CAAY,CAAC,YAAD,CAAZ,EADmB;;AAGnB,QAAI,YAAJ,EAAkB;AACd,sBAAc,YAAd,EADc;KAAlB;;AAIA,eAAW,MAAM,UAAN,EAAkB,IAA7B,EAPmB;CAAN,CAAjB;;;;EAUA,SAAS,QAAT,GAAoB;AAChB,QAAI,OAAO,QAAP,EAAiB;AACjB,eADiB;KAArB;;AAIA,WAAO,IAAP,CAAY,CAAC,cAAD,eAAsB,CAAtB,eAA8B,CAA1C,EALgB;AAMhB,QAAI;AACA,eAAO,OAAP,CAAe,EAAE,gBAAF,EAAQ,gBAAR,EAAf,EADA;KAAJ,CAEE,OAAO,GAAP,EAAY;AACV,eAAO,IAAP,CAAY,mBAAZ,EAAiC,EAAE,SAAS,IAAI,OAAJ,EAA5C,EADU;KAAZ;CARN;;AAaA,OAAO,EAAP,CAAU,SAAV,EAAqB,MAAM;AACvB,UAAM,mBAAmB,iCAAnB,CADiB;AAEvB,WAAO,IAAP,CAAY,CAAC,aAAD,eAAqB,CAArB,eAA6B,CAAzC,EAA4C,EAAE,gBAAF,EAA5C,EAFuB;;AAIvB,mBAAe,YAAY,MAAM,WAAW,KAAX,CAAiB,EAAE,MAAM,MAAN,EAAnB,CAAN,EAA0C,KAAtD,CAAf,CAJuB;;AAMvB,eAAW,KAAX,YAAmB,MAAM,OAAN,IAAkB,iBAArC,EANuB;CAAN,CAArB;;AASA,WAAW,EAAX,CAAc,MAAd,EAAsB,QAAQ;AAC1B,WAAO,IAAP,CAAY,MAAZ,EAAoB,IAApB,EAD0B;AAE1B,YAAQ,KAAK,IAAL;AACJ,aAAK,MAAL;AACI,kBADJ;AADJ,aAGS,eAAL;AACI,sCAAa,KAAK,MAAL,CAAb,CADJ;AAEI,kBAFJ;AAHJ,aAMS,SAAL,CANJ;AAOI,aAAK,aAAL;AACI,oBAAQ,KAAK,IAAL,CAAR,GADJ;AAEI,kBAFJ;AAPJ;AAWQ,mBAAO,IAAP,CAAY,CAAC,gBAAD,GAAmB,KAAK,IAAL,EAAU,CAAzC,EADJ;;AAVJ,KAF0B;CAAR,CAAtB;;AAkBA","file":"tcp-client.js","sourcesContent":["import { ConsoleLogger } from 'nightingale';\nimport findNetworkInterface from './networkInterface';\nimport { createStream } from 'objectstream';\nimport { Socket } from 'net';\nimport { updateConfig } from './config';\nimport * as actions from './actions';\nimport { host, port } from './argv';\n\nconst logger = new ConsoleLogger('client');\n\n\nlet pingInterval;\nconst socket = new Socket({ host, port });\nconst jsonStream = createStream(socket);\n\njsonStream.on('error', err => {\n    logger.error(err);\n});\n\nsocket.on('error', err => {\n    logger.error(err);\n\n    if (pingInterval) {\n        clearInterval(pingInterval);\n    }\n\n    setTimeout(() => _connect(), 1000);\n});\n\nsocket.on('end', () => {\n    logger.warn(`socket ended`);\n\n    if (pingInterval) {\n        clearInterval(pingInterval);\n    }\n\n    setTimeout(() => _connect(), 1000);\n});\n\nfunction _connect() {\n    if (socket.writable) {\n        return;\n    }\n\n    logger.info(`connecting to ${host}:${port}`);\n    try {\n        socket.connect({ port, host });\n    } catch (err) {\n        logger.warn('could not connect', { message: err.message });\n    }\n}\n\nsocket.on('connect', () => {\n    const networkInterface = findNetworkInterface();\n    logger.info(`connected to ${host}:${port}`, { networkInterface });\n\n    pingInterval = setInterval(() => jsonStream.write({ type: 'ping' }), 10000);\n\n    jsonStream.write({ type: 'hello', ...networkInterface });\n});\n\njsonStream.on('data', data => {\n    logger.info('data', data);\n    switch (data.type) {\n        case 'ping':\n            break;\n        case 'update-config':\n            updateConfig(data.config);\n            break;\n        case 'refresh':\n        case 'self-update':\n            actions[data.type]();\n            break;\n        default:\n            logger.warn(`unknown action: ${data.type}`);\n\n    }\n});\n\n_connect();\n"]}